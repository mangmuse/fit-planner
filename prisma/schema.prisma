generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Exercises     Exercise[]
  routines      Routine[]
  UserExercises UserExercise[]
  workouts      Workout[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Exercise {
  id             Int             @id @default(autoincrement())
  name           String
  category       String
  imageUrl       String
  isCustom       Boolean         @default(false)
  userId         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  user           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  routineDetails RoutineDetail[]
  userExercises  UserExercise[]
  workoutDetails WorkoutDetail[]
}

model UserExercise {
  id           String    @id @default(uuid())
  userId       String
  exerciseId   Int
  isBookmarked Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  exercise     Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, exerciseId])
}

model Workout {
  id             String          @id @default(uuid())
  date           DateTime        @db.Date
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  status         WorkoutStatus   @default(EMPTY)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutDetails WorkoutDetail[]

  @@unique([userId, date])
}

model WorkoutDetail {
  id            String    @id @default(uuid())
  workoutId     String
  exerciseId    Int
  weight        Float?
  rpe           Float?
  exerciseOrder Int
  reps          Int?
  setOrder      Int
  isDone        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  exercise      Exercise  @relation(fields: [exerciseId], references: [id])
  workout       Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseOrder, setOrder])
}

model Routine {
  id             String          @id @default(uuid())
  name           String
  description    String?
  userId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  routineDetails RoutineDetail[]
}

model RoutineDetail {
  id            String   @id @default(uuid())
  routineId     String
  exerciseId    Int
  weight        Float?
  rpe           Float?
  exerciseOrder Int
  reps          Int?
  setOrder      Int
  exercise      Exercise @relation(fields: [exerciseId], references: [id])
  routine       Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@unique([routineId, exerciseOrder, setOrder])
}

enum WorkoutStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  EMPTY
}
