generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  emailVerified DateTime?
  image         String?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  Exercises Exercise[]
  workouts  Workout[]
  accounts  Account[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?  
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Exercise {
  id             Int             @id @default(autoincrement())
  name           String
  category       String
  imageUrl       String
  isCustom       Boolean         @default(false)
  isBookmarked   Boolean         @default(false)
  userId         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?       @updatedAt
  user           User?           @relation(fields: [userId], references: [id])
  workoutDetails WorkoutDetail[]
}

// model Exercise {
//   id            Int            @id @default(autoincrement())
//   name          String
//   category      String
//   imageUrl      String
//   isCustom      Boolean        @default(false)
//   userId        String?      
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime?      @updatedAt
//   user          User?          @relation(fields: [userId], references: [id])
  
//   userExercises UserExercise[] 
// }

// model UserExercise {
//   id           String   @id @default(uuid())
//   userId       String
//   exerciseId   Int

//   isBookmarked Boolean  @default(false)

//   createdAt    DateTime @default(now())
//   updatedAt    DateTime? @updatedAt

//   user         User     @relation(fields: [userId], references: [id])
//   exercise     Exercise @relation(fields: [exerciseId], references: [id])

//   @@unique([userId, exerciseId])
// }

model Workout {
  id             String           @id @default(uuid())
  date           DateTime        
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  workoutDetails WorkoutDetail[]  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

model WorkoutDetail {
  id         String   @id @default(uuid())
  workoutId  String
  exerciseId Int
  order      Int      // 운동 순서
  weight    Float?   
  rpe       Float?    
  
  workout    Workout  @relation(fields: [workoutId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([workoutId, exerciseId])
}